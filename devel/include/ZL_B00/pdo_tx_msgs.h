// Generated by gencpp from file ZL_B00/pdo_tx_msgs.msg
// DO NOT EDIT!


#ifndef ZL_B00_MESSAGE_PDO_TX_MSGS_H
#define ZL_B00_MESSAGE_PDO_TX_MSGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ZL_B00
{
template <class ContainerAllocator>
struct pdo_tx_msgs_
{
  typedef pdo_tx_msgs_<ContainerAllocator> Type;

  pdo_tx_msgs_()
    : id(0)
    , data()  {
      data.assign(0);
  }
  pdo_tx_msgs_(const ContainerAllocator& _alloc)
    : id(0)
    , data()  {
  (void)_alloc;
      data.assign(0);
  }



   typedef uint32_t _id_type;
  _id_type id;

   typedef boost::array<uint8_t, 4>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct pdo_tx_msgs_

typedef ::ZL_B00::pdo_tx_msgs_<std::allocator<void> > pdo_tx_msgs;

typedef boost::shared_ptr< ::ZL_B00::pdo_tx_msgs > pdo_tx_msgsPtr;
typedef boost::shared_ptr< ::ZL_B00::pdo_tx_msgs const> pdo_tx_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ZL_B00::pdo_tx_msgs_<ContainerAllocator1> & lhs, const ::ZL_B00::pdo_tx_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ZL_B00::pdo_tx_msgs_<ContainerAllocator1> & lhs, const ::ZL_B00::pdo_tx_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ZL_B00

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9771f6fc35a81e831d4a03276869531";
  }

  static const char* value(const ::ZL_B00::pdo_tx_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9771f6fc35a81e8ULL;
  static const uint64_t static_value2 = 0x31d4a03276869531ULL;
};

template<class ContainerAllocator>
struct DataType< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ZL_B00/pdo_tx_msgs";
  }

  static const char* value(const ::ZL_B00::pdo_tx_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 id\n"
"uint8[4] data\n"
;
  }

  static const char* value(const ::ZL_B00::pdo_tx_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pdo_tx_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ZL_B00::pdo_tx_msgs_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZL_B00_MESSAGE_PDO_TX_MSGS_H
