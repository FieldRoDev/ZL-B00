// Generated by gencpp from file ZL_B00/pdo_tx_msgs.msg
// DO NOT EDIT!


#ifndef ZL_B00_MESSAGE_PDO_TX_MSGS_H
#define ZL_B00_MESSAGE_PDO_TX_MSGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ZL_B00
{
template <class ContainerAllocator>
struct pdo_tx_msgs_
{
  typedef pdo_tx_msgs_<ContainerAllocator> Type;

  pdo_tx_msgs_()
    : traction_position(0)
    , traction_velocity(0)
    , steer_position(0)
    , steer_velocity(0)  {
    }
  pdo_tx_msgs_(const ContainerAllocator& _alloc)
    : traction_position(0)
    , traction_velocity(0)
    , steer_position(0)
    , steer_velocity(0)  {
  (void)_alloc;
    }



   typedef int32_t _traction_position_type;
  _traction_position_type traction_position;

   typedef int32_t _traction_velocity_type;
  _traction_velocity_type traction_velocity;

   typedef int32_t _steer_position_type;
  _steer_position_type steer_position;

   typedef int32_t _steer_velocity_type;
  _steer_velocity_type steer_velocity;





  typedef boost::shared_ptr< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct pdo_tx_msgs_

typedef ::ZL_B00::pdo_tx_msgs_<std::allocator<void> > pdo_tx_msgs;

typedef boost::shared_ptr< ::ZL_B00::pdo_tx_msgs > pdo_tx_msgsPtr;
typedef boost::shared_ptr< ::ZL_B00::pdo_tx_msgs const> pdo_tx_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ZL_B00::pdo_tx_msgs_<ContainerAllocator1> & lhs, const ::ZL_B00::pdo_tx_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.traction_position == rhs.traction_position &&
    lhs.traction_velocity == rhs.traction_velocity &&
    lhs.steer_position == rhs.steer_position &&
    lhs.steer_velocity == rhs.steer_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ZL_B00::pdo_tx_msgs_<ContainerAllocator1> & lhs, const ::ZL_B00::pdo_tx_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ZL_B00

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4311f381460c7d703b7fe50387d84cb7";
  }

  static const char* value(const ::ZL_B00::pdo_tx_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4311f381460c7d70ULL;
  static const uint64_t static_value2 = 0x3b7fe50387d84cb7ULL;
};

template<class ContainerAllocator>
struct DataType< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ZL_B00/pdo_tx_msgs";
  }

  static const char* value(const ::ZL_B00::pdo_tx_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 traction_position\n"
"int32 traction_velocity\n"
"int32 steer_position\n"
"int32 steer_velocity\n"
;
  }

  static const char* value(const ::ZL_B00::pdo_tx_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.traction_position);
      stream.next(m.traction_velocity);
      stream.next(m.steer_position);
      stream.next(m.steer_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pdo_tx_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ZL_B00::pdo_tx_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ZL_B00::pdo_tx_msgs_<ContainerAllocator>& v)
  {
    s << indent << "traction_position: ";
    Printer<int32_t>::stream(s, indent + "  ", v.traction_position);
    s << indent << "traction_velocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.traction_velocity);
    s << indent << "steer_position: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steer_position);
    s << indent << "steer_velocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steer_velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZL_B00_MESSAGE_PDO_TX_MSGS_H
